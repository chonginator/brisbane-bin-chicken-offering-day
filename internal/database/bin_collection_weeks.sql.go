// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bin_collection_weeks.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCollectionWeek = `-- name: CreateCollectionWeek :one
INSERT INTO bin_collection_weeks (
  id,
  created_at,
  updated_at,
  week_start_date,
  zone
)
VALUES (
  ?1,
  DATETIME('now', 'utc'),
  DATETIME('now', 'utc'),
  ?2,
  ?3
)
RETURNING id, created_at, updated_at, week_start_date, zone
`

type CreateCollectionWeekParams struct {
	ID            uuid.UUID
	WeekStartDate time.Time
	Zone          string
}

func (q *Queries) CreateCollectionWeek(ctx context.Context, arg CreateCollectionWeekParams) (BinCollectionWeek, error) {
	row := q.db.QueryRowContext(ctx, createCollectionWeek, arg.ID, arg.WeekStartDate, arg.Zone)
	var i BinCollectionWeek
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WeekStartDate,
		&i.Zone,
	)
	return i, err
}

const getNextCollectionWeek = `-- name: GetNextCollectionWeek :one
SELECT zone, week_start_date
FROM bin_collection_weeks
WHERE week_start_date >= DATETIME('now', 'utc')
ORDER BY week_start_date ASC
LIMIT 1
`

type GetNextCollectionWeekRow struct {
	Zone          string
	WeekStartDate time.Time
}

func (q *Queries) GetNextCollectionWeek(ctx context.Context) (GetNextCollectionWeekRow, error) {
	row := q.db.QueryRowContext(ctx, getNextCollectionWeek)
	var i GetNextCollectionWeekRow
	err := row.Scan(&i.Zone, &i.WeekStartDate)
	return i, err
}
