// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: streets.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createStreet = `-- name: CreateStreet :one
INSERT INTO streets (id, created_at, updated_at, name, suburb_id)
VALUES (
  ?1,
  DATETIME('now', 'utc'),
  DATETIME('now', 'utc'),
  ?2,
  ?3
)
RETURNING id, created_at, updated_at, name, suburb_id
`

type CreateStreetParams struct {
	ID       uuid.UUID
	Name     string
	SuburbID uuid.UUID
}

func (q *Queries) CreateStreet(ctx context.Context, arg CreateStreetParams) (Street, error) {
	row := q.db.QueryRowContext(ctx, createStreet, arg.ID, arg.Name, arg.SuburbID)
	var i Street
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.SuburbID,
	)
	return i, err
}

const getStreetsBySuburbName = `-- name: GetStreetsBySuburbName :many

SELECT streets.id, streets.created_at, streets.updated_at, streets.name, streets.suburb_id
FROM streets
INNER JOIN suburbs
ON streets.suburb_id = suburbs.id
WHERE suburbs.name = ?1
`

// -- name: GetStreetsBySuburbName :many
// SELECT * FROM streets
// WHERE suburb_id = (
//
//	SELECT id FROM suburbs
//	WHERE suburbs.name = :name
//
// );
func (q *Queries) GetStreetsBySuburbName(ctx context.Context, name string) ([]Street, error) {
	rows, err := q.db.QueryContext(ctx, getStreetsBySuburbName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Street
	for rows.Next() {
		var i Street
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.SuburbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
