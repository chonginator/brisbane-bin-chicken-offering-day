// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: addresses.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (
  id,
  created_at,
  updated_at,
  property_id,
  unit_number,
  house_number,
  house_number_suffix,
  street_id,
  collection_day,
  zone
)
VALUES (
  ?1,
  DATETIME('now', 'utc'),
  DATETIME('now', 'utc'),
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7,
  ?8
)
RETURNING id, created_at, updated_at, property_id, unit_number, house_number, house_number_suffix, street_id, collection_day, zone
`

type CreateAddressParams struct {
	ID                uuid.UUID
	PropertyID        string
	UnitNumber        sql.NullString
	HouseNumber       string
	HouseNumberSuffix sql.NullString
	StreetID          uuid.UUID
	CollectionDay     string
	Zone              string
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.ID,
		arg.PropertyID,
		arg.UnitNumber,
		arg.HouseNumber,
		arg.HouseNumberSuffix,
		arg.StreetID,
		arg.CollectionDay,
		arg.Zone,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PropertyID,
		&i.UnitNumber,
		&i.HouseNumber,
		&i.HouseNumberSuffix,
		&i.StreetID,
		&i.CollectionDay,
		&i.Zone,
	)
	return i, err
}
