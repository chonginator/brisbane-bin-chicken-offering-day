// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: addresses.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (
  id,
  created_at,
  updated_at,
  property_id,
  unit_number,
  house_number,
  house_number_suffix,
  street_id,
  collection_day,
  zone
)
VALUES (
  ?1,
  DATETIME('now', 'utc'),
  DATETIME('now', 'utc'),
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7,
  ?8
)
RETURNING id, created_at, updated_at, property_id, unit_number, house_number, house_number_suffix, street_id, collection_day, zone
`

type CreateAddressParams struct {
	ID                uuid.UUID
	PropertyID        string
	UnitNumber        sql.NullString
	HouseNumber       string
	HouseNumberSuffix sql.NullString
	StreetID          uuid.UUID
	CollectionDay     string
	Zone              string
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.ID,
		arg.PropertyID,
		arg.UnitNumber,
		arg.HouseNumber,
		arg.HouseNumberSuffix,
		arg.StreetID,
		arg.CollectionDay,
		arg.Zone,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PropertyID,
		&i.UnitNumber,
		&i.HouseNumber,
		&i.HouseNumberSuffix,
		&i.StreetID,
		&i.CollectionDay,
		&i.Zone,
	)
	return i, err
}

const getAddresses = `-- name: GetAddresses :many
SELECT id, created_at, updated_at, property_id, unit_number, house_number, house_number_suffix, street_id, collection_day, zone
FROM addresses
`

func (q *Queries) GetAddresses(ctx context.Context) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAddresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PropertyID,
			&i.UnitNumber,
			&i.HouseNumber,
			&i.HouseNumberSuffix,
			&i.StreetID,
			&i.CollectionDay,
			&i.Zone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAddressesByStreetName = `-- name: GetAddressesByStreetName :many
SELECT addresses.id, addresses.created_at, addresses.updated_at, addresses.property_id, addresses.unit_number, addresses.house_number, addresses.house_number_suffix, addresses.street_id, addresses.collection_day, addresses.zone
FROM addresses
INNER JOIN streets
ON addresses.street_id = street.id
WHERE streets.name = ?1
`

func (q *Queries) GetAddressesByStreetName(ctx context.Context, name string) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAddressesByStreetName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PropertyID,
			&i.UnitNumber,
			&i.HouseNumber,
			&i.HouseNumberSuffix,
			&i.StreetID,
			&i.CollectionDay,
			&i.Zone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
