// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: addresses.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (
  id,
  created_at,
  updated_at,
  property_id,
  unit_number,
  house_number,
  house_number_suffix,
  street_id,
  collection_day,
  zone
)
VALUES (
  ?1,
  DATETIME('now', 'utc'),
  DATETIME('now', 'utc'),
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7,
  ?8
)
RETURNING id, created_at, updated_at, property_id, unit_number, house_number, house_number_suffix, street_id, collection_day, zone
`

type CreateAddressParams struct {
	ID                uuid.UUID
	PropertyID        string
	UnitNumber        sql.NullString
	HouseNumber       string
	HouseNumberSuffix sql.NullString
	StreetID          uuid.UUID
	CollectionDay     string
	Zone              string
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.ID,
		arg.PropertyID,
		arg.UnitNumber,
		arg.HouseNumber,
		arg.HouseNumberSuffix,
		arg.StreetID,
		arg.CollectionDay,
		arg.Zone,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PropertyID,
		&i.UnitNumber,
		&i.HouseNumber,
		&i.HouseNumberSuffix,
		&i.StreetID,
		&i.CollectionDay,
		&i.Zone,
	)
	return i, err
}

const getAddressBatch = `-- name: GetAddressBatch :many
SELECT id, created_at, updated_at, property_id, unit_number, house_number, house_number_suffix, street_id, collection_day, zone
FROM addresses
LIMIT ?2
OFFSET ?1
`

type GetAddressBatchParams struct {
	Offset    int64
	BatchSize int64
}

func (q *Queries) GetAddressBatch(ctx context.Context, arg GetAddressBatchParams) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAddressBatch, arg.Offset, arg.BatchSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PropertyID,
			&i.UnitNumber,
			&i.HouseNumber,
			&i.HouseNumberSuffix,
			&i.StreetID,
			&i.CollectionDay,
			&i.Zone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAddressesByStreetName = `-- name: GetAddressesByStreetName :many
SELECT DISTINCT
  addresses.property_id, 
  addresses.unit_number, 
  addresses.house_number, 
  addresses.house_number_suffix
FROM addresses
INNER JOIN streets
ON addresses.street_id = streets.id
WHERE streets.name = ?1
`

type GetAddressesByStreetNameRow struct {
	PropertyID        string
	UnitNumber        sql.NullString
	HouseNumber       string
	HouseNumberSuffix sql.NullString
}

func (q *Queries) GetAddressesByStreetName(ctx context.Context, name string) ([]GetAddressesByStreetNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getAddressesByStreetName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAddressesByStreetNameRow
	for rows.Next() {
		var i GetAddressesByStreetNameRow
		if err := rows.Scan(
			&i.PropertyID,
			&i.UnitNumber,
			&i.HouseNumber,
			&i.HouseNumberSuffix,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionSchedulesByPropertyID = `-- name: GetCollectionSchedulesByPropertyID :many
SELECT collection_day, zone
FROM addresses
WHERE property_id = ?1
`

type GetCollectionSchedulesByPropertyIDRow struct {
	CollectionDay string
	Zone          string
}

func (q *Queries) GetCollectionSchedulesByPropertyID(ctx context.Context, propertyID string) ([]GetCollectionSchedulesByPropertyIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getCollectionSchedulesByPropertyID, propertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCollectionSchedulesByPropertyIDRow
	for rows.Next() {
		var i GetCollectionSchedulesByPropertyIDRow
		if err := rows.Scan(&i.CollectionDay, &i.Zone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAddresses = `-- name: SearchAddresses :many
WITH address_data AS (
  SELECT 
    a.property_id,
    a.collection_day,
    a.zone,
    CAST(
      CASE 
        WHEN a.unit_number IS NOT NULL AND a.unit_number != '' 
        THEN a.unit_number || '/' || a.house_number 
        ELSE a.house_number 
      END || 
      CASE 
        WHEN a.house_number_suffix IS NOT NULL AND a.house_number_suffix != '' 
        THEN a.house_number_suffix 
        ELSE '' 
      END || ' ' || s.name || ', ' || sub.name
    AS VARCHAR) AS formatted_address
  FROM addresses a
  JOIN streets s ON a.street_id = s.id
  JOIN suburbs sub ON s.suburb_id = sub.id
  WHERE 
    (
      COALESCE(a.unit_number, '') || 
      '/' ||
      COALESCE(a.house_number, '') || 
      COALESCE(a.house_number_suffix, '') || 
      ' ' ||
      s.name || 
      ', ' ||
      sub.name
    ) LIKE LOWER('%' || ?2 || '%')
)
SELECT 
  property_id,
  collection_day,
  zone,
  formatted_address
FROM address_data
LIMIT ?1
`

type SearchAddressesParams struct {
	Limit int64
	Query sql.NullString
}

type SearchAddressesRow struct {
	PropertyID       string
	CollectionDay    string
	Zone             string
	FormattedAddress string
}

func (q *Queries) SearchAddresses(ctx context.Context, arg SearchAddressesParams) ([]SearchAddressesRow, error) {
	rows, err := q.db.QueryContext(ctx, searchAddresses, arg.Limit, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAddressesRow
	for rows.Next() {
		var i SearchAddressesRow
		if err := rows.Scan(
			&i.PropertyID,
			&i.CollectionDay,
			&i.Zone,
			&i.FormattedAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
