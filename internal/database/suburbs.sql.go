// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: suburbs.sql

package database

import (
	"context"
)

const createSuburb = `-- name: CreateSuburb :one
INSERT INTO suburbs (id, created_at, updated_at, name)
VALUES (
  ?1,
  DATETIME('now', 'utc'),
  DATETIME('now', 'utc'),
  ?2
)
RETURNING id, created_at, updated_at, name
`

type CreateSuburbParams struct {
	ID   interface{}
	Name string
}

func (q *Queries) CreateSuburb(ctx context.Context, arg CreateSuburbParams) (Suburb, error) {
	row := q.db.QueryRowContext(ctx, createSuburb, arg.ID, arg.Name)
	var i Suburb
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getSuburbs = `-- name: GetSuburbs :many
SELECT id, created_at, updated_at, name FROM suburbs
`

func (q *Queries) GetSuburbs(ctx context.Context) ([]Suburb, error) {
	rows, err := q.db.QueryContext(ctx, getSuburbs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Suburb
	for rows.Next() {
		var i Suburb
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
